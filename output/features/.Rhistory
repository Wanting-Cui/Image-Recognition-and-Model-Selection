model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(par=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
View(err_cv)
which.min(err_cv[,1])
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
fit_train <- train(dat_train, label_train, par_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par=par_best))
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par=par_best))
par_best$par
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
source('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project3_PoodleKFC/lib/train.R')
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
source('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project3_PoodleKFC/lib/train.R')
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(depth=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
save(fit_train, file="../output/fit_train.RData")
tm_test=NA
if(run.test){
load(file=paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file="../output/fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file="../output/pred_test.RData")
}
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
cat("Time for making prediction=", tm_test[1], "s \n")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
setwd("./ads_spr2017_proj3")
setwd("../ads_spr2017_proj3")
setwd("~/GitHub/Spring2018-Project3-Group1/doc")
experiment_dir <- "../data/zipcode/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
experiment_dir
class(experiment_dir)
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
getwd()
list.files()
setwd("C:/Users/ding/Documents/GitHub/Spring2018-Project3-Group1")
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
experiment_dir <- "../data/zipcode/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
setwd("~/GitHub/Spring2018-Project3-Group1/output/features")
read.csv("SIFT_train.csv")
sift <- read.csv("SIFT_train.csv")
sift <- read.csv("SIFT_train.csv", header = FALSE)[, -1]
index <- c(data.matrix(read.table("TEST-NUMBER.txt")))
index <- c(data.matrix(read.table("../output/TEST-NUMBER.txt")))
index <- c(data.matrix(read.table(".../output/TEST-NUMBER.txt")))
index <- c(data.matrix(read.table("../TEST-NUMBER.txt")))
hog <- load("HOG.RData")
hog <- dat
lbp <- read.csv("lbp.csv", header = FALSE)
sift1 <- sift[index, ]
write.csv(sift1, file = "SIFT_test1.csv", row.names = FALSE)
sift2 <- sift[-index, ]
write.csv(sift2, file = "SIFT_train1.csv", row.names = FALSE)
lbp1 <- lbp[index, ]
write.csv(lbp1, file = "lbp_test1.csv", row.names = FALSE)
write.csv(lbp2, file = "lbp_train1.csv", row.names = FALSE)
lbp2 <- lbp[-index, ]
write.csv(lbp2, file = "lbp_train1.csv", row.names = FALSE)
save(hog1, "hog_test1.RData")
hog1 <- hog[index, ]
save(hog1, "hog_test1.RData")
save(hog1, file = "hog_test1.RData")
save(hog2, file = "hog_train.RData")
hog2 <- hog[-index, ]
save(hog2, file = "hog_train.RData")
label <- read.csv("label_train.csv")
View(label)
label1 <- label[index, 3]
label2 <- label[-index, 3]
write.csv(label2, file = "label_train1,csv", row.names = FALSE)
paste0(feat.dir, "SIFT_train1.csv")
feat.dir <- "../output/features/"
paste0(feat.dir, "SIFT_train1.csv")
sift1 <- read.csv(paste0(feat.dir, "SIFT_train1.csv"), header = FALSE)
View(sift1)
sift1 <- read.csv(paste0(feat.dir, "SIFT_train1.csv"))
load("hog_train1.csv")
load(paste0(feat.dir, "hog_train1.csv"))
load(paste0(feat.dir, "hog_train1.RData"))
load(paste0(feat.dir, "hog_train1.RData"))
feat.dir <- "../output/features/"
sift2 <- read.csv(paste0(feat.dir, "SIFT_train1.csv"))
load(paste0(feat.dir, "hog_train1.RData"))
lbp2 <- read.csv(paste0(feat.dir, "lbp_train1.csv"))
train <- cbind(sift2, hog2, lbp2)
dim(hog2)
train <- data.matrix(train)
lab_tr <- read.csv(paste0(feat.dir, "label_train1.csv"))
lab_tr <- data.matrix(lab_tr)
train2 <- cbind(sift2, hog2, lbp2)
train2 <- data.matrix(train2)
library(xgboost)
library(ggplot2)
library(reshape2)
source("../lib/xgboost_cv.R")
View(xgboost_cv)
param <- list("objective" = "multi:softmax",
"num_class" = 4,
"eta" = 0.5, "max.depth" = 4)
tm_train <- system.time(bst <- xgboost(data = train2, label = lab_tr, params = param, nrounds = 80, verbose = 0))
save(fit_train, file="../output/XGBOOST_resultss/fit_train.RData")
save(bst, file="../output/XGBOOST_results/bst.RData")
tm_train
sift1 <- read.csv("SIFT_test1.csv")
sift1 <- read.csv(paste0("SIFT_test1.csv"))
sift1 <- read.csv(paste0(feat.dir, "SIFT_test1.csv"))
load(paste0((feat.dir, "hog_test1.RData")))
load(paste0(feat.dir, "hog_test1.RData"))
lbp1 <- read.csv(paste0(feat.dir, "lbp_test1.csv"))
test <- cbind(sift1, hog1, lbp1)
test <- data.matrix(test)
test <- cbind(sift1, hog1, lbp1)
test <- data.matrix(test)
tm_test <- system.time(pred <- predict(bst, test))
save(pred, file="../output/XGBOOST_results/pred_test.RData")
label <- read.csv("label_train.csv")
label1 <- label[index, 3]
index <- c(data.matrix(read.table("../TEST-NUMBER.txt")))
label1 <- label[index, 3]
write.csv(label1, file = "label_test1.csv", row.names = FALSE)
lab_te <- read.csv(paste0(feat.dir, "label_test1"))
lab_te <- read.csv(paste0(feat.dir, "label_test1"))
lab_te <- read.csv(paste0(feat.dir, "label_test1.csv"))
mean(pred != lab_te)
cat("Time for training model=", tm_train[3], "s \n")
cat("Time for making prediction=", tm_test[3], "s \n")
shl_tr <- xgboost_cv(train = train2, lab = lab_tr, nrou = 300,
list_max.depth = c(3, 5, 10, 20),
list_eta = c(0.03, 0.3, 0.5, 0.8),
name = "SIFT + HOG + lbp", fold = K)
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.test=TRUE # run evaluation on an independent test set
shl_tr <- xgboost_cv(train = train2, lab = lab_tr, nrou = 300,
list_max.depth = c(3, 5, 10, 20),
list_eta = c(0.03, 0.3, 0.5, 0.8),
name = "SIFT + HOG + lbp", fold = K)
shl_tr[[2]]
err.cv1 <- shl_tr[[1]]
save(err.cv1, file = "../XGBOOST_results/err_shl.csv")
save(err.cv1, file = "../XGBOOST_results/err_shl.RData")
save(err.cv1, file = "err_shl.RData")
getwd()
getwd()
save(err.cv1, file = "../output/err_shl.RData")
save(err.cv1, file = "../output/XGBOOST_results/err_shl.RData")
save(err.cv1, file = "../output/XGBOOST_results/err_shl.RData")
print(shl_tr[[2]])
jpeg("../output/XGBOOST_results/XGBOOST & SIFT + HOG + lbp.jpg")
plot(shl_tr[[2]])
dev.off
jpeg("../output/XGBOOST_results/XGBOOST & SIFT + HOG + lbp0.jpeg")
plot(shl_tr[[2]])
dev.off
err.cv1 <- shl_tr[[1]]
print(shl_tr[[2]])
num <- read.csv("Number_Parity.csv")
num <- read.csv("Number_Parity.csv")
qqnorm(num$WordDiff)
qqline(num$WordDiff)
qqnorm(num$WordDiff)
qqline(num$WordDiff)
par(mfrow = c(1,4))
par(mfrow = c(1,4))
qqnorm(num$WordDiff)
qqline(num$WordDiff)
qqnorm(num$WordSame)
qqline(num$WordSame)
qqnorm(num$Num_Diff)
qqline(num$Num_Diff)
qqnorm(num$Num_Same)
qqline(num$Num_Same)
par(mfrow = c(1,4))
qqnorm(num$WordDiff)
qqline(num$WordDiff)
qqnorm(num$WordSame)
qqline(num$WordSame)
qqnorm(num$Num_Diff)
qqline(num$Num_Diff)
qqnorm(num$Num_Same)
qqline(num$Num_Same)
pairs(~WordDiff + WordSame + Num_Diff + Num_Same, data = num)
X <- as.matrix(num)
X <- data.matrix(num)
xbar <- colMeans(X)
xbar
library(xgboost)
library(ggplot2)
library(reshape2)
source("../lib/xgboost_cv.R")
ind <- c(data.matrix(read.table("../data/TEST-NUMBER.txt")))
ind <- c(data.matrix(read.table("../output/features/TEST-NUMBER.txt")))
ind <- c(data.matrix(read.table("../output/TEST-NUMBER.txt")))
lab <- read.csv("../output/features/label_train.csv")
lab_tr <- data.matrix(lab[-ind, 3])
dat1 <- read.csv("../output/gist/gist10.csv")
train1 <- dat1[-ind, ]
dat2 <- read.csv("../data/train/SIFT_train.csv", header = FALSE)[, -1]
train2 <- data.matrix(dat2[-ind, -1])
load("../output/HOG.RData")
load("../output/features/HOG.RData")
dat3 <- dat
train3 <- data.matrix(dat3[-ind, ])
dat6 <- cbind(dat2, dat3)[, -1]
train6 <- data.matrix(dat6[-ind, ])
lab_te <- data.matrix(lab[ind, 3])
test <- data.matrix(dat2[ind, -1])
param <- list("objective" = "multi:softmax",
"num_class" = 4,
"eta" = 0.8, "max.depth" = 3)
param <- list("objective" = "multi:softmax",
"num_class" = 4,
"eta" = 0.5, "max.depth" = 4)
system.time(bst <- xgboost(data = train6, label = lab_tr, params = param, nrounds = 200, verbose = 0))
pred <- predict(bst, test)
mean(pred != lab_te)
system.time(bst <- xgboost(data = train6, label = lab_tr, params = param, nrounds = 200, verbose = 0))
system.time(bst <- xgboost(data = train2, label = lab_tr, params = param, nrounds = 200, verbose = 0))
param <- list("objective" = "multi:softmax",
"num_class" = 4,
"eta" = 0.3, "max.depth" = 3)
system.time(bst <- xgboost(data = train2, label = lab_tr, params = param, nrounds = 200, verbose = 0))
pred <- predict(bst, test)
sum(pred != lab_te)/300
lab_te <- data.matrix(lab[ind, 3])
test <- data.matrix(dat6[ind, ])
param <- list("objective" = "multi:softmax",
"num_class" = 4,
"eta" = 0.5, "max.depth" = 3)
system.time(bst <- xgboost(data = train6, label = lab_tr, params = param, nrounds = 200, verbose = 0))
pred <- predict(bst, test)
mean(pred != lab_te)
dat11 <- cbind(dat2, dat3, dat4)
dat4 <- read.csv("../output/lbp/lbp.csv", header = FALSE)
train4 <- data.matrix(dat4[-ind, ])
dat11 <- cbind(dat2, dat3, dat4)
train11 <- data.matrix(dat11[-ind, ])
test <- data.matrix(dat11[ind, ])
system.time(bst <- xgboost(data = train11, label = lab_tr, params = param, nrounds = 200, verbose = 0))
pred <- predict(bst, test)
mean(pred != lab_te)
sift2 <- read.csv(paste0(feat.dir, "SIFT_train.csv"), header = FALSE)[, -1]
feat.dir <- "../output/features2/"
sift2 <- read.csv(paste0(feat.dir, "SIFT_train.csv"), header = FALSE)[, -1]
load(paste0(feat.dir, "HOG.RData"))
hog2 <- dat
lbp2 <- read.csv(paste0(feat.dir, "lbp.csv"))
lbp2 <- read.csv(paste0(feat.dir, "lbp.csv"), header = FALSE)
lbp2 <- read.csv(paste0(feat.dir, "lbp.csv"), header = FALSE)
train2 <- cbind(sift2, hog2, lbp2)
lab_tr <- read.csv(paste0(feat.dir, "label_train.csv"))[,3]
lab_tr <- data.matrix(lab_tr)
shl_tr <- xgboost_cv(train = train2, lab = lab_tr, nrou = 300,
list_max.depth = c(3, 5, 10, 20),
list_eta = c(0.03, 0.3, 0.5, 0.8),
name = "SIFT + HOG + lbp", fold = K)
source("../lib/xgboost_cv.R")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.test=TRUE # run evaluation on an independent test set
shl_tr <- xgboost_cv(train = train2, lab = lab_tr, nrou = 300,
list_max.depth = c(3, 5, 10, 20),
list_eta = c(0.03, 0.3, 0.5, 0.8),
name = "SIFT + HOG + lbp", fold = K)
sift2 <- read.csv(paste0(feat.dir, "SIFT_train.csv"), header = FALSE)[, -1]
load(paste0(feat.dir, "HOG.RData"))
hog2 <- dat
lbp2 <- read.csv(paste0(feat.dir, "lbp.csv"), header = FALSE)
train2 <- cbind(sift2, hog2, lbp2)
train2 <- data.matrix(train2)
lab_tr <- read.csv(paste0(feat.dir, "label_train.csv"))[,3]
lab_tr <- data.matrix(lab_tr)
shl_tr <- xgboost_cv(train = train2, lab = lab_tr, nrou = 300,
list_max.depth = c(3, 5, 10, 20),
list_eta = c(0.03, 0.3, 0.5, 0.8),
name = "SIFT + HOG + lbp", fold = K)
shl_tr <- xgboost_cv(train = train2, lab = lab_tr, nrou = 300,
list_max.depth = c(3, 5, 10, 20),
list_eta = c(0.03, 0.3, 0.5, 0.8),
name = "SIFT + HOG + lbp", fold = K)
load("../output/XGBOOST_results/err_shl.RData")
load("../output/XGBOOST_results/err_shl.RData")
print(shl_tr[[2]])
View(err.cv1)
ind <- c(data.matrix(read.table("../output/TEST-NUMBER.txt")))
lab <- read.csv("../output/features/label_train.csv")
lab_tr <- data.matrix(lab[-ind, 3])
ind <- c(data.matrix(read.table("../data/train/TEST-NUMBER.txt")))
lab_tr <- data.matrix(lab[-ind, 3])
dat1 <- read.csv("../output/gist/gist10.csv")
dat2 <- read.csv("../data/train/SIFT_train.csv", header = FALSE)[, -1]
load("../output/features/HOG.RData")
gist6 <- read.csv("../output/gist/gist6.csv")
turtle <- read.csv("Turtles.csv")
X <- data.matrix(turtle)
View(turtle)
dat <- read.csv("Stiffness.csv")
View(dat)
X <- data.matrix(turtle)[,1:3]
View(X)
X1 <- X[1:24, ]
X2 <- X[25:48, ]
n1 <- nrow(X1)
n2 <- nrow(X2)
p <- ncol(X1)
xbar1 <- colMeans(X1)
xbar2 <- colMeans(X2)
xbar1 <- colMeans(X1)
xbar2 <- colMeans(X2)
S1 <- cov(X1)
S2 <- cov(X2)
S <- 1/(n1 + n2 - 2) * ( (n1-1)*S1 + (n2-1)*S2 )
T2 <- 1/(1/n1 + 1/n2) * sum((xbar1 - xbar2) * solve(S, xbar1 - xbar2))
T2
1 - pf((n1+n2-p-1)/((n1+n2-2)*p)*T2, df1=p, df2=n1+n2-p-1)
T2
rec <- read.csv("Track_Records.csv")
View(rec)
R <- cor(rec)
View(rec)
rec <- data.matrix(rec[,-1])
R <- cor(rec)
sift2 <- read.csv(paste0(feat.dir, "SIFT_train1.csv"), header = FALSE)[, -1]
feat.dir <- "../output/features/"
sift2 <- read.csv(paste0(feat.dir, "SIFT_train1.csv"), header = FALSE)[, -1]
load(paste0(feat.dir, "hog_train1.RData"))
lbp2 <- read.csv(paste0(feat.dir, "lbp_train1.csv"), header = FALSE)
sift2 <- read.csv(paste0(feat.dir, "SIFT_train1.csv"), header = FALSE)[, -1]
sift2 <- read.csv(paste0(feat.dir, "SIFT_train1.csv"), header = TRUE)[, -1]
View(sift2)
sift2 <- read.csv(paste0(feat.dir, "SIFT_train1.csv"), header = TRUE)
if(!require("xgboost")){
install.packages("xgboost")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("reshape2")){
install.packages("reshape2")
}
library(xgboost)
library(ggplot2)
library(reshape2)
source("../lib/xgboost_cv.R")
feat.dir <- "../output/features2/"
K <- 5  # number of CV folds
run.test=TRUE # run evaluation on an independent test set
lab_tr <- data.matrix(lab_tr)
sift2 <- read.csv(paste0(feat.dir, "SIFT_train.csv"), header = FALSE)[, -1]
load(paste0(feat.dir, "HOG.RData"))
hog2 <- dat
lbp2 <- read.csv(paste0(feat.dir, "lbp.csv"), header = FALSE)
train2 <- cbind(sift2, hog2, lbp2)
train2 <- data.matrix(train2)
lab_tr <- read.csv(paste0(feat.dir, "label_train.csv"))[,3]
lab_tr <- data.matrix(lab_tr)
dim(train2)
tm_train=NA
param <- list("objective" = "multi:softmax",
"num_class" = 4,
"eta" = 0.5, "max.depth" = 4)
tm_train <- system.time(bst <- xgboost(data = train2, label = lab_tr, params = param, nrounds = 80, verbose = 0))
save(bst, file="../output/XGBOOST_results/bst.RData")
tm_train[3]
sift1 <- read.csv(paste0(feat.dir, "SIFT_test.csv"))
sift1 <- read.csv(paste0(feat.dir, "SIFT_test.csv"))[, -1]
sift1 <- read.csv(paste0(feat.dir, "SIFT_test.csv"), header = FALSE)[, -1]
lab_te <- read.csv(paste0(feat.dir, "labels.csv"))
View(lab_te)
lab_te <- read.csv(paste0(feat.dir, "labels1.csv"))
load(paste0(feat.dir, "HOG_test.RData"))
dim(dat)
base <- read.csv(paste0(feat.dir, "baselinetest.csv"))
View(base)
lab_te[,2] <- base[,2]
View(lab_te)
lbp1 <- read.csv(paste0(feat.dir, "lbp_test.csv"))
test <- cbind(sift1, dat, lbp1)
lbp1 <- read.csv(paste0(feat.dir, "lbp_test.csv"), header = FALSE)
test <- cbind(sift1, dat, lbp1)
test <- data.matrix(test)
tm_test <- system.time(pred <- predict(bst, test))
lab_te[,3] <- pred
save(lab_te, file="../output/XGBOOST_results/labels.RData")
View(lab_te)
write.csv(lab_te, file = paste0(feat.dir, "labels.csv"))
write.csv(lab_te, file = paste0(feat.dir, "labels.csv"), row.names = FALSE)
S <- cov(rec)
rec <- read.csv("Track_Records.csv")
rec <- data.matrix(rec[,-1])
R <- cor(rec)
R
S <- cov(rec)
E <- eigen(S)
E
diag(L)/sum(diag(L))
L <- diag(E$values)
diag(L)/sum(diag(L))
plot(diag(L), type = "b", main = "Scree Plot for PCA")
plot(diag(L)/sum(diag(L)), type = "b", main = "Scree Plot for PCA")
n <- nrow(rec)
p <- ncol(rec)
？sweep
?sweep
X.C <- sweep(X, 2, xbar, "-")
X <- data.matrix(rec[,-1])
xbar <- colMeans(X)
X.C <- sweep(X, 2, xbar, "-")
View(X.C)
rec <- read.csv("Track_Records.csv")
X <- data.matrix(rec[,-1])
xbar <- colMeans(X)
X.C <- sweep(X, 2, xbar, "-")
View(X.C)
ones <- rep(1, n)
H.X <- X - ones %*% t(xbar)
View(H.X)
X.S <- sweep(H.X, 2, s, "/")
s <- apply(X, 2, sd)
X.S <- sweep(H.X, 2, s, "/")
L <- diag(eigen(X.S)$values)
X.S <- sweep(H.X, 2, s, "/")
L <- diag(eigen(X.S)$values)
E <- eigen(X)
S.S <- cov(X.S)
L <- diag(eigen(S.S)$values)
diag(L)/sum(diag(L))
plot(diag(L)/sum(diag(L)), type = "b", main = "Scree Plot for PCA")
L
diag(L)
plot(cumsum(diag(L))/sum(diag(L)), type = "b", main = "Scree Plot for PCA")
E.ve <- eigen(S.S)$vectors
rank(E.ve[,1])
Y <- S.S %*% G
G <- eigen(S.S)$vectors
Y <- S.S %*% G
View(Y)
G <- eigen(S.S)$vectors
Y <- X.S %*% G
rank(Y[,1])
View(rec)
rec[ranking, 1]
ranking <- rank(Y[,1])
rec[ranking, 1]
?rank
ranking <- rank(-Y[,1], de)
ranking <- rank(-Y[,1])
rec[ranking, 1]
ranking <- rank(Y[,1])
ranking <- sort(Y[,1])
rec[ranking, 1]
ranking
ranking <- order(Y[,1])
ranking
rec[ranking, 1]
ranking <- order(Y[,1], decreasing = TRUE)
rec[ranking, 1]
